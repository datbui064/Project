@page "/BaoCao"
@using CEM.Models
@using Radzen.Blazor
@using Radzen
@inject QlbContext _context
@inject NotificationService Notification
@inject MinIOService MinIOService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<head>
    <link rel="stylesheet" href="ViewAdd.css">
</head>

<h3>Báo Cáo</h3>
<div class="container">
    <div class="form-container">
        <!-- Mã Báo Cáo -->
        <div class="form-group">
            <label>Mã Báo Cáo:</label>
            <RadzenNumeric @bind-Value="baoCao.MaBaoCao" />
        </div>

        <!-- Tiêu Đề -->
        <div class="form-group">
            <label>Tiêu Đề:</label>
            <RadzenTextBox @bind-Value="baoCao.TieuDe" />
        </div>

        <!-- Nội Dung -->
        <div class="form-group">
            <label>Nội Dung:</label>
            <RadzenTextBox @bind-Value="baoCao.NoiDung" Style="height:150px;" Multiline="true" />
        </div>

        <!-- Đường Dẫn Tệp -->
        <div class="form-group">
            <label>Đường Dẫn Tệp:</label>
            <RadzenTextBox @bind-Value="baoCao.DuongDanTep" />
        </div>

        <div class="form-group">
            <label class="form-label">File Đính Kèm:</label>
            <InputFile class="input-field" OnChange="@HandleFileSelected" />
        </div>

        <p class="status-message">@statusMessage</p>

        <!-- Nút Lưu -->
        <div class="form-group text-right">
            <RadzenButton Shade="Shade.Lighter" Click="Them" Text="Lưu Dữ Liệu" ButtonStyle="ButtonStyle.Primary" />
        </div>
    </div>
</div>

@code {
    private BaoCao baoCao = new BaoCao();
    private Stream? fileStream;
    private string? fileName;
    private string? statusMessage;

    private string selectedBucket = "baocao";

    private async Task Them()
    {
        try
        {
           

            _context.BaoCaos.Add(baoCao);
            await _context.SaveChangesAsync();

            if (fileStream != null && !string.IsNullOrEmpty(fileName))
            {
                var success = await MinIOService.UploadFileAsync(fileStream, fileName, selectedBucket); // Assuming null for tags
                if (!success)
                {
                    throw new Exception("File upload failed.");
                }
            }

            Notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Thành công",
                    Detail = "Dữ liệu đã được lưu thành công!",
                    Duration = 4000
                });

            // Clear form fields after saving
            baoCao = new BaoCao();
            fileStream = null;
            fileName = null;
            statusMessage = "Chưa có tệp nào được chọn.";
        }
        catch (Exception ex)
        {
            Notification.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Lỗi",
                    Detail = "Có lỗi xảy ra khi lưu dữ liệu: " + ex.Message,
                    Duration = 4000
                });
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            fileStream = file.OpenReadStream(10 * 1024 * 1024);
            fileName = file.Name;
            Console.WriteLine($"Đã chọn file: {fileName}");
            statusMessage = "Đã chọn file";
        }
    }
}
